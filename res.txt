Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==9377== Memcheck, a memory error detector
==9377== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==9377== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==9377== Command: ./oblig1.c.out
==9377== 
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==9378== 
==9378== HEAP SUMMARY:
==9378==     in use at exit: 0 bytes in 0 blocks
==9378==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9378== 
==9378== All heap blocks were freed -- no leaks are possible
==9378== 
==9378== For counts of detected and suppressed errors, rerun with: -v
==9378== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==9379== 
==9379== HEAP SUMMARY:
==9379==     in use at exit: 0 bytes in 0 blocks
==9379==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9379== 
==9379== All heap blocks were freed -- no leaks are possible
==9379== 
==9379== For counts of detected and suppressed errors, rerun with: -v
==9379== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==9377== 
==9377== HEAP SUMMARY:
==9377==     in use at exit: 0 bytes in 0 blocks
==9377==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==9377== 
==9377== All heap blocks were freed -- no leaks are possible
==9377== 
==9377== For counts of detected and suppressed errors, rerun with: -v
==9377== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
Checkin Valgrind with helgrind check
---
==9381== 
==9381== HEAP SUMMARY:
==9381==     in use at exit: 0 bytes in 0 blocks
==9381==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9381== 
==9381== All heap blocks were freed -- no leaks are possible
==9381== 
==9381== For counts of detected and suppressed errors, rerun with: -v
==9381== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==9384== Helgrind, a thread error detector
==9384== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==9384== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==9384== Command: ./oblig1.c.out
==9384== 
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==9380== 
==9380== HEAP SUMMARY:
==9380==     in use at exit: 0 bytes in 0 blocks
==9380==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9380== 
==9380== All heap blocks were freed -- no leaks are possible
==9380== 
==9380== For counts of detected and suppressed errors, rerun with: -v
==9380== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==9385== 
==9385== For counts of detected and suppressed errors, rerun with: -v
==9385== Use --history-level=approx or =none to gain increased speed, at
==9385== the cost of reduced accuracy of conflicting-access information
==9385== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==9382== 
==9382== HEAP SUMMARY:
==9382==     in use at exit: 0 bytes in 0 blocks
==9382==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9382== 
==9382== All heap blocks were freed -- no leaks are possible
==9382== 
==9382== For counts of detected and suppressed errors, rerun with: -v
==9382== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
9382
==9383== 
==9383== HEAP SUMMARY:
==9383==     in use at exit: 0 bytes in 0 blocks
==9383==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9383== 
==9383== All heap blocks were freed -- no leaks are possible
==9383== 
==9383== For counts of detected and suppressed errors, rerun with: -v
==9383== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==9386== 
==9386== For counts of detected and suppressed errors, rerun with: -v
==9386== Use --history-level=approx or =none to gain increased speed, at
==9386== the cost of reduced accuracy of conflicting-access information
==9386== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==9384== 
==9384== For counts of detected and suppressed errors, rerun with: -v
==9384== Use --history-level=approx or =none to gain increased speed, at
==9384== the cost of reduced accuracy of conflicting-access information
==9384== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
==9388== 
==9388== For counts of detected and suppressed errors, rerun with: -v
==9388== Use --history-level=approx or =none to gain increased speed, at
==9388== the cost of reduced accuracy of conflicting-access information
==9388== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==9387== 
==9387== For counts of detected and suppressed errors, rerun with: -v
==9387== Use --history-level=approx or =none to gain increased speed, at
==9387== the cost of reduced accuracy of conflicting-access information
==9387== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==9389== 
==9389== For counts of detected and suppressed errors, rerun with: -v
==9389== Use --history-level=approx or =none to gain increased speed, at
==9389== the cost of reduced accuracy of conflicting-access information
==9389== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
9389
==9390== 
==9390== For counts of detected and suppressed errors, rerun with: -v
==9390== Use --history-level=approx or =none to gain increased speed, at
==9390== the cost of reduced accuracy of conflicting-access information
==9390== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==9415== Memcheck, a memory error detector
==9415== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==9415== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==9415== Command: ./oblig1.c.out
==9415== 
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==9416== 
==9416== HEAP SUMMARY:
==9416==     in use at exit: 0 bytes in 0 blocks
==9416==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9416== 
==9416== All heap blocks were freed -- no leaks are possible
==9416== 
==9416== For counts of detected and suppressed errors, rerun with: -v
==9416== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==9417== 
==9417== HEAP SUMMARY:
==9417==     in use at exit: 0 bytes in 0 blocks
==9417==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9417== 
==9417== All heap blocks were freed -- no leaks are possible
==9417== 
==9417== For counts of detected and suppressed errors, rerun with: -v
==9417== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==9415== 
==9415== HEAP SUMMARY:
==9415==     in use at exit: 0 bytes in 0 blocks
==9415==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==9415== 
==9415== All heap blocks were freed -- no leaks are possible
==9415== 
==9415== For counts of detected and suppressed errors, rerun with: -v
==9415== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Checkin Valgrind with helgrind check
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
==9422== Helgrind, a thread error detector
==9422== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==9422== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==9422== Command: ./oblig1.c.out
==9422== 
==9419== 
==9419== HEAP SUMMARY:
==9419==     in use at exit: 0 bytes in 0 blocks
==9419==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9419== 
==9419== All heap blocks were freed -- no leaks are possible
==9419== 
==9419== For counts of detected and suppressed errors, rerun with: -v
==9419== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==9418== 
==9418== HEAP SUMMARY:
==9418==     in use at exit: 0 bytes in 0 blocks
==9418==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9418== 
==9418== All heap blocks were freed -- no leaks are possible
==9418== 
==9418== For counts of detected and suppressed errors, rerun with: -v
==9418== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==9423== 
==9423== For counts of detected and suppressed errors, rerun with: -v
==9423== Use --history-level=approx or =none to gain increased speed, at
==9423== the cost of reduced accuracy of conflicting-access information
==9423== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==9420== 
==9420== HEAP SUMMARY:
==9420==     in use at exit: 0 bytes in 0 blocks
==9420==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9420== 
==9420== All heap blocks were freed -- no leaks are possible
==9420== 
==9420== For counts of detected and suppressed errors, rerun with: -v
==9420== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
9420
==9421== 
==9421== HEAP SUMMARY:
==9421==     in use at exit: 0 bytes in 0 blocks
==9421==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==9421== 
==9421== All heap blocks were freed -- no leaks are possible
==9421== 
==9421== For counts of detected and suppressed errors, rerun with: -v
==9421== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==9424== 
==9424== For counts of detected and suppressed errors, rerun with: -v
==9424== Use --history-level=approx or =none to gain increased speed, at
==9424== the cost of reduced accuracy of conflicting-access information
==9424== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==9422== 
==9422== For counts of detected and suppressed errors, rerun with: -v
==9422== Use --history-level=approx or =none to gain increased speed, at
==9422== the cost of reduced accuracy of conflicting-access information
==9422== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Kodesjekk resultat for oblig12.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig12.c
---
gcc: error: oblig12.c: No such file or directory
gcc: fatal error: no input files
compilation terminated.
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
Checking Clang-Tidy Errors:
==9426== 
==9426== For counts of detected and suppressed errors, rerun with: -v
==9426== Use --history-level=approx or =none to gain increased speed, at
==9426== the cost of reduced accuracy of conflicting-access information
==9426== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig12.c.
error: error reading '/home/shomec/r/runbergh/c-code/oblig12.c' [clang-diagnostic-error]
---
Checking Valgrind leak check
---
valgrind: ./oblig12.c.out: No such file or directory
---
Checkin Valgrind with helgrind check
---
valgrind: ./oblig12.c.out: No such file or directory
---
Kodesjekk resultat for oblig1.3.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3.c
---
oblig1.3.c: In function ‘validate’:
oblig1.3.c:175:11: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
     if ( !isdigit ( a[x] ) ) return 1;
           ^
---
Checking Clang-Tidy Errors:
---
46 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.c.
/home/shomec/r/runbergh/c-code/oblig1.3.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>
^        ~~~~~~~~~
         <pthread.h>
/home/shomec/r/runbergh/c-code/oblig1.3.c:12:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Producer(void *); /* Producer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:13:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Consumer(void *); /* Consumer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:44:11: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      i = atoi ( buffer );
          ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:47:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/shomec/r/runbergh/c-code/oblig1.3.c:50:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:100:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:138:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:174:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for ( x = 0; x < strlen ( a ); x++ )
                                      ^
                                       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:175:29: warning: statement should be inside braces [readability-braces-around-statements]
    if ( !isdigit ( a[x] ) ) return 1;
                            ^
                             {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 31 warnings (31 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==9439== Memcheck, a memory error detector
==9439== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==9439== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==9439== Command: ./oblig1.3.c.out
==9439== 
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==9425== 
==9425== For counts of detected and suppressed errors, rerun with: -v
==9425== Use --history-level=approx or =none to gain increased speed, at
==9425== the cost of reduced accuracy of conflicting-access information
==9425== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==9427== 
==9427== For counts of detected and suppressed errors, rerun with: -v
==9427== Use --history-level=approx or =none to gain increased speed, at
==9427== the cost of reduced accuracy of conflicting-access information
==9427== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
9427
==9428== 
==9428== For counts of detected and suppressed errors, rerun with: -v
==9428== Use --history-level=approx or =none to gain increased speed, at
==9428== the cost of reduced accuracy of conflicting-access information
==9428== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
main started
Enter a number: 0
Enter a number: 0
Enter a number: 2
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 1 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 0, idx is 2): ==
(Producer 1, idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 1 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 1 , idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Producer 1, idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 1, idx is 4): ====
(Producer 1, idx is 5): =====
(Producer 0, idx is 6): ======
(Consumer 1 , idx is 5): =====
(Consumer 0 , idx is 4): ====
(Producer 0, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Producer 1, idx is 5): =====
(Producer 1, idx is 6): ======
(Consumer 0 , idx is 5): =====
(Consumer 1 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 1 , idx is 2): ==
(Producer 1, idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 1 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 1, idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 0, idx is 5): =====
(Consumer 1 , idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Producer 1, idx is 5): =====
(Producer 0, idx is 6): ======
(Consumer 1 , idx is 5): =====
(Consumer 1 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 0, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 0, idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 1 , idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 0, idx is 2): ==
(Producer 1, idx is 3): ===
(Producer 1, idx is 4): ====
(Producer 0, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 0, idx is 5): =====
(Producer 1, idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Consumer 0 , idx is 5): =====
(Producer 1, idx is 6): ======
(Producer 0, idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 0, idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 0, idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 0, idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 0, idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 0, idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 0, idx is 7): =======
(Consumer 0 , idx is 6): ======
(Consumer 0 , idx is 5): =====
(Consumer 1 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 1 , idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Producer 0, idx is 2): ==
(Producer 0, idx is 3): ===
(Consumer 1 , idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 1 , idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 1 , idx is 1): =
(Producer 1, idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Producer 0, idx is 3): ===
(Consumer 1 , idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 1 , idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 1 , idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Producer 0, idx is 5): =====
(Producer 1, idx is 6): ======
(Producer 0, idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Producer 0, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 0 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 1, idx is 8): ========
(Producer 0, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 1, idx is 7): =======
(Consumer 0 , idx is 6): ======
(Consumer 1 , idx is 5): =====
(Producer 0, idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Consumer 0 , idx is 6): ======
(Consumer 1 , idx is 5): =====
(Producer 0, idx is 6): ======
(Consumer 0 , idx is 5): =====
(Producer 1, idx is 6): ======
(Consumer 1 , idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 0, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 0, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 0, idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 0, idx is 3): ===
(Consumer 1 , idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 0 , idx is 0): 
(Producer 1, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 0 , idx is 1): =
(Producer 0, idx is 2): ==
(Consumer 1 , idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 0, idx is 1): =
(Consumer 1 , idx is 0): 
(Producer 1, idx is 1): =
(Producer 1, idx is 2): ==
(Producer 0, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 0, idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 1, idx is 4): ====
(Producer 0, idx is 5): =====
(Consumer 0 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Producer 0, idx is 5): =====
(Consumer 1 , idx is 4): ====
(Producer 0, idx is 5): =====
(Producer 1, idx is 6): ======
(Producer 0, idx is 7): =======
(Producer 1, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 1, idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Producer 0, idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Consumer 1 , idx is 7): =======
(Producer 0, idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 0, idx is 9): =========
(Producer 1, idx is 10): ==========
(Consumer 1 , idx is 9): =========
(Consumer 1 , idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 0 , idx is 8): ========
(Producer 1, idx is 9): =========
(Consumer 1 , idx is 8): ========
(Consumer 0 , idx is 7): =======
(Consumer 1 , idx is 6): ======
(Producer 1, idx is 7): =======
(Consumer 0 , idx is 6): ======
(Producer 1, idx is 7): =======
(Consumer 1 , idx is 6): ======
(Consumer 0 , idx is 5): =====
(Producer 1, idx is 6): ======
(Consumer 1 , idx is 5): =====
(Producer 1, idx is 6): ======
(Consumer 0 , idx is 5): =====
(Consumer 1 , idx is 4): ====
(Consumer 1 , idx is 3): ===
(Producer 1, idx is 4): ====
(Producer 1, idx is 5): =====
(Consumer 1 , idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 1 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Consumer 0 , idx is 2): ==
(Producer 1, idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Producer 1, idx is 4): ====
(Consumer 0 , idx is 3): ===
(Consumer 0 , idx is 2): ==
(Consumer 0 , idx is 1): =
(Consumer 0 , idx is 0): 
main done
==9439== 
==9439== HEAP SUMMARY:
==9439==     in use at exit: 8 bytes in 2 blocks
==9439==   total heap usage: 8 allocs, 6 frees, 67,656 bytes allocated
==9439== 
==9439== 8 bytes in 2 blocks are definitely lost in loss record 1 of 1
==9439==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==9439==    by 0x400E43: main (in /home/others/shomec/r/runbergh/c-code/oblig1.3.c.out)
==9439== 
==9439== LEAK SUMMARY:
==9439==    definitely lost: 8 bytes in 2 blocks
==9439==    indirectly lost: 0 bytes in 0 blocks
==9439==      possibly lost: 0 bytes in 0 blocks
==9439==    still reachable: 0 bytes in 0 blocks
==9439==         suppressed: 0 bytes in 0 blocks
==9439== 
==9439== For counts of detected and suppressed errors, rerun with: -v
==9439== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
---
Checkin Valgrind with helgrind check
---
==10049== Helgrind, a thread error detector
==10049== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==10049== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==10049== Command: ./oblig1.3.c.out
==10049== 
==10049== 
==10049== Process terminating with default action of signal 2 (SIGINT)
==10049==    at 0x5154260: __read_nocancel (syscall-template.S:84)
==10049==    by 0x50D75E7: _IO_file_underflow@@GLIBC_2.2.5 (fileops.c:592)
==10049==    by 0x50D860D: _IO_default_uflow (genops.c:413)
==10049==    by 0x50CBC69: _IO_getline_info (iogetline.c:60)
==10049==    by 0x50CAB7C: fgets (iofgets.c:53)
==10049==    by 0x400BBB: main (in /home/others/shomec/r/runbergh/c-code/oblig1.3.c.out)
==10049== 
==10049== For counts of detected and suppressed errors, rerun with: -v
==10049== Use --history-level=approx or =none to gain increased speed, at
==10049== the cost of reduced accuracy of conflicting-access information
==10049== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==11594== Memcheck, a memory error detector
==11594== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11594== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11594== Command: ./oblig1.c.out
==11594== 
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==11595== 
==11595== HEAP SUMMARY:
==11595==     in use at exit: 0 bytes in 0 blocks
==11595==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==11595== 
==11595== All heap blocks were freed -- no leaks are possible
==11595== 
==11595== For counts of detected and suppressed errors, rerun with: -v
==11595== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==11596== 
==11596== HEAP SUMMARY:
==11596==     in use at exit: 0 bytes in 0 blocks
==11596==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==11596== 
==11596== All heap blocks were freed -- no leaks are possible
==11596== 
==11596== For counts of detected and suppressed errors, rerun with: -v
==11596== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==11594== 
==11594== HEAP SUMMARY:
==11594==     in use at exit: 0 bytes in 0 blocks
==11594==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==11594== 
==11594== All heap blocks were freed -- no leaks are possible
==11594== 
==11594== For counts of detected and suppressed errors, rerun with: -v
==11594== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
Checkin Valgrind with helgrind check
---
==11601== Helgrind, a thread error detector
==11601== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==11601== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11601== Command: ./oblig1.c.out
==11601== 
==11598== 
==11598== HEAP SUMMARY:
==11598==     in use at exit: 0 bytes in 0 blocks
==11598==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==11598== 
==11598== All heap blocks were freed -- no leaks are possible
==11598== 
==11598== For counts of detected and suppressed errors, rerun with: -v
==11598== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==11597== 
==11597== HEAP SUMMARY:
==11597==     in use at exit: 0 bytes in 0 blocks
==11597==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==11597== 
==11597== All heap blocks were freed -- no leaks are possible
==11597== 
==11597== For counts of detected and suppressed errors, rerun with: -v
==11597== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==11603== 
==11603== For counts of detected and suppressed errors, rerun with: -v
==11603== Use --history-level=approx or =none to gain increased speed, at
==11603== the cost of reduced accuracy of conflicting-access information
==11603== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==11599== 
==11599== HEAP SUMMARY:
==11599==     in use at exit: 0 bytes in 0 blocks
==11599==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==11599== 
==11599== All heap blocks were freed -- no leaks are possible
==11599== 
==11599== For counts of detected and suppressed errors, rerun with: -v
==11599== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
11599
==11600== 
==11600== HEAP SUMMARY:
==11600==     in use at exit: 0 bytes in 0 blocks
==11600==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==11600== 
==11600== All heap blocks were freed -- no leaks are possible
==11600== 
==11600== For counts of detected and suppressed errors, rerun with: -v
==11600== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==11604== 
==11604== For counts of detected and suppressed errors, rerun with: -v
==11604== Use --history-level=approx or =none to gain increased speed, at
==11604== the cost of reduced accuracy of conflicting-access information
==11604== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==11601== 
==11601== For counts of detected and suppressed errors, rerun with: -v
==11601== Use --history-level=approx or =none to gain increased speed, at
==11601== the cost of reduced accuracy of conflicting-access information
==11601== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Kodesjekk resultat for oblig1.2.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.2.c
---
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
==11606== 
==11606== For counts of detected and suppressed errors, rerun with: -v
==11606== Use --history-level=approx or =none to gain increased speed, at
==11606== the cost of reduced accuracy of conflicting-access information
==11606== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
oblig1.2.c: In function ‘tfunc’:
oblig1.2.c:39:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
---
Checking Clang-Tidy Errors:
---
35 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.2.c.
/home/shomec/r/runbergh/c-code/oblig1.2.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>               /* printf */
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         <pthread.h> 
/home/shomec/r/runbergh/c-code/oblig1.2.c:35:31: warning: statement should be inside braces [google-readability-braces-around-statements]
              if(targs->signal[i]==1) // Tell opp semafor til tråd i
                                     ^
                                      {
/home/shomec/r/runbergh/c-code/oblig1.2.c:51:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    for(i = 0; i < 6; i++)
                          ^
                           {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==11615== Memcheck, a memory error detector
==11615== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11615== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11615== Command: ./oblig1.2.c.out
==11615== 
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==11605== 
==11605== For counts of detected and suppressed errors, rerun with: -v
==11605== Use --history-level=approx or =none to gain increased speed, at
==11605== the cost of reduced accuracy of conflicting-access information
==11605== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==11607== 
==11607== For counts of detected and suppressed errors, rerun with: -v
==11607== Use --history-level=approx or =none to gain increased speed, at
==11607== the cost of reduced accuracy of conflicting-access information
==11607== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
11607
==11608== 
==11608== For counts of detected and suppressed errors, rerun with: -v
==11608== Use --history-level=approx or =none to gain increased speed, at
==11608== the cost of reduced accuracy of conflicting-access information
==11608== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==11615== 
==11615== HEAP SUMMARY:
==11615==     in use at exit: 192 bytes in 6 blocks
==11615==   total heap usage: 13 allocs, 7 frees, 67,360 bytes allocated
==11615== 
==11615== 192 bytes in 6 blocks are definitely lost in loss record 1 of 1
==11615==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==11615==    by 0x400951: main (in /home/others/shomec/r/runbergh/c-code/oblig1.2.c.out)
==11615== 
==11615== LEAK SUMMARY:
==11615==    definitely lost: 192 bytes in 6 blocks
==11615==    indirectly lost: 0 bytes in 0 blocks
==11615==      possibly lost: 0 bytes in 0 blocks
==11615==    still reachable: 0 bytes in 0 blocks
==11615==         suppressed: 0 bytes in 0 blocks
==11615== 
==11615== For counts of detected and suppressed errors, rerun with: -v
==11615== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
---
Checkin Valgrind with helgrind check
---
==11630== Helgrind, a thread error detector
==11630== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==11630== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11630== Command: ./oblig1.2.c.out
==11630== 
Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==11630== 
==11630== For counts of detected and suppressed errors, rerun with: -v
==11630== Use --history-level=approx or =none to gain increased speed, at
==11630== the cost of reduced accuracy of conflicting-access information
==11630== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 166 from 30)
---
Kodesjekk resultat for oblig1.3.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3.c
---
oblig1.3.c: In function ‘validate’:
oblig1.3.c:175:11: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
     if ( !isdigit ( a[x] ) ) return 1;
           ^
---
Checking Clang-Tidy Errors:
---
46 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.c.
/home/shomec/r/runbergh/c-code/oblig1.3.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>
^        ~~~~~~~~~
         <pthread.h>
/home/shomec/r/runbergh/c-code/oblig1.3.c:12:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Producer(void *); /* Producer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:13:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Consumer(void *); /* Consumer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:44:11: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      i = atoi ( buffer );
          ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:47:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/shomec/r/runbergh/c-code/oblig1.3.c:50:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:100:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:138:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:174:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for ( x = 0; x < strlen ( a ); x++ )
                                      ^
                                       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:175:29: warning: statement should be inside braces [readability-braces-around-statements]
    if ( !isdigit ( a[x] ) ) return 1;
                            ^
                             {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 31 warnings (31 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==11643== Memcheck, a memory error detector
==11643== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11643== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11643== Command: ./oblig1.3.c.out
==11643== 
==11643== 
==11643== Process terminating with default action of signal 2 (SIGINT)
==11643==    at 0x514E260: __read_nocancel (syscall-template.S:84)
==11643==    by 0x50D15E7: _IO_file_underflow@@GLIBC_2.2.5 (fileops.c:592)
==11643==    by 0x50D260D: _IO_default_uflow (genops.c:413)
==11643==    by 0x50C5C69: _IO_getline_info (iogetline.c:60)
==11643==    by 0x50C4B7C: fgets (iofgets.c:53)
==11643==    by 0x400BBB: main (in /home/others/shomec/r/runbergh/c-code/oblig1.3.c.out)
main started
Enter a number: 0
Enter a number: ==11643== 
==11643== HEAP SUMMARY:
==11643==     in use at exit: 0 bytes in 0 blocks
==11643==   total heap usage: 2 allocs, 2 frees, 66,560 bytes allocated
==11643== 
==11643== All heap blocks were freed -- no leaks are possible
==11643== 
==11643== For counts of detected and suppressed errors, rerun with: -v
==11643== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Kodesjekk resultat for oblig1
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1
---
oblig1: file not recognized: File format not recognized
collect2: error: ld returned 1 exit status
---
Checking Clang-Tidy Errors:
---
Error while processing /home/shomec/r/runbergh/c-code/oblig1.
---
Checking Valgrind leak check
---
valgrind: ./oblig1.out: No such file or directory
---
Checkin Valgrind with helgrind check
---
valgrind: ./oblig1.out: No such file or directory
---
Kodesjekk resultat for oblig1.2
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.2
---
oblig1.2: In function `_fini':
(.fini+0x0): multiple definition of `_fini'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o:(.fini+0x0): first defined here
oblig1.2: In function `data_start':
(.data+0x0): multiple definition of `__data_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.data+0x0): first defined here
oblig1.2: In function `data_start':
(.data+0x8): multiple definition of `__dso_handle'
/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o:(.data+0x0): first defined here
oblig1.2:(.rodata+0x0): multiple definition of `_IO_stdin_used'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.rodata.cst4+0x0): first defined here
oblig1.2: In function `_start':
(.text+0x0): multiple definition of `_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.text+0x0): first defined here
oblig1.2: In function `_init':
(.init+0x0): multiple definition of `_init'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o:(.init+0x0): first defined here
/usr/lib/gcc/x86_64-linux-gnu/5/crtend.o:(.tm_clone_table+0x0): multiple definition of `__TMC_END__'
oblig1.2:(.data+0x10): first defined here
/usr/bin/ld: error in oblig1.2(.eh_frame); no .eh_frame_hdr table will be created.
collect2: error: ld returned 1 exit status
---
Checking Clang-Tidy Errors:
---
Error while processing /home/shomec/r/runbergh/c-code/oblig1.2.
---
Checking Valgrind leak check
---
valgrind: ./oblig1.2.out: No such file or directory
---
Checkin Valgrind with helgrind check
---
valgrind: ./oblig1.2.out: No such file or directory
---
Kodesjekk resultat for oblig1.3
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3
---
oblig1.3: In function `_fini':
(.fini+0x0): multiple definition of `_fini'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o:(.fini+0x0): first defined here
oblig1.3: In function `data_start':
(.data+0x0): multiple definition of `__data_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.data+0x0): first defined here
oblig1.3: In function `data_start':
(.data+0x8): multiple definition of `__dso_handle'
/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o:(.data+0x0): first defined here
oblig1.3:(.rodata+0x0): multiple definition of `_IO_stdin_used'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.rodata.cst4+0x0): first defined here
oblig1.3: In function `_start':
(.text+0x0): multiple definition of `_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.text+0x0): first defined here
oblig1.3: In function `_init':
(.init+0x0): multiple definition of `_init'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o:(.init+0x0): first defined here
/usr/lib/gcc/x86_64-linux-gnu/5/crtend.o:(.tm_clone_table+0x0): multiple definition of `__TMC_END__'
oblig1.3:(.data+0x10): first defined here
/usr/bin/ld: error in oblig1.3(.eh_frame); no .eh_frame_hdr table will be created.
collect2: error: ld returned 1 exit status
---
Checking Clang-Tidy Errors:
---
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.
---
Checking Valgrind leak check
---
valgrind: ./oblig1.3.out: No such file or directory
---
Checkin Valgrind with helgrind check
---
valgrind: ./oblig1.3.out: No such file or directory
---
Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==15167== Memcheck, a memory error detector
==15167== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==15167== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==15167== Command: ./oblig1.c.out
==15167== 
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==15214== 
==15214== HEAP SUMMARY:
==15214==     in use at exit: 0 bytes in 0 blocks
==15214==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==15214== 
==15214== All heap blocks were freed -- no leaks are possible
==15214== 
==15214== For counts of detected and suppressed errors, rerun with: -v
==15214== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==15217== 
==15217== HEAP SUMMARY:
==15217==     in use at exit: 0 bytes in 0 blocks
==15217==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==15217== 
==15217== All heap blocks were freed -- no leaks are possible
==15217== 
==15217== For counts of detected and suppressed errors, rerun with: -v
==15217== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==15167== 
==15167== HEAP SUMMARY:
==15167==     in use at exit: 0 bytes in 0 blocks
==15167==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==15167== 
==15167== All heap blocks were freed -- no leaks are possible
==15167== 
==15167== For counts of detected and suppressed errors, rerun with: -v
==15167== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
Checkin Valgrind with helgrind check
---
==15500== Helgrind, a thread error detector
==15500== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==15500== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==15500== Command: ./oblig1.c.out
==15500== 
==15317== 
==15317== HEAP SUMMARY:
==15317==     in use at exit: 0 bytes in 0 blocks
==15317==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==15317== 
==15317== All heap blocks were freed -- no leaks are possible
==15317== 
==15317== For counts of detected and suppressed errors, rerun with: -v
==15317== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==15316== 
==15316== HEAP SUMMARY:
==15316==     in use at exit: 0 bytes in 0 blocks
==15316==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==15316== 
==15316== All heap blocks were freed -- no leaks are possible
==15316== 
==15316== For counts of detected and suppressed errors, rerun with: -v
==15316== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==15566== 
==15566== For counts of detected and suppressed errors, rerun with: -v
==15566== Use --history-level=approx or =none to gain increased speed, at
==15566== the cost of reduced accuracy of conflicting-access information
==15566== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==15497== 
==15497== HEAP SUMMARY:
==15497==     in use at exit: 0 bytes in 0 blocks
==15497==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==15497== 
==15497== All heap blocks were freed -- no leaks are possible
==15497== 
==15497== For counts of detected and suppressed errors, rerun with: -v
==15497== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
15497
==15498== 
==15498== HEAP SUMMARY:
==15498==     in use at exit: 0 bytes in 0 blocks
==15498==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==15498== 
==15498== All heap blocks were freed -- no leaks are possible
==15498== 
==15498== For counts of detected and suppressed errors, rerun with: -v
==15498== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==15568== 
==15568== For counts of detected and suppressed errors, rerun with: -v
==15568== Use --history-level=approx or =none to gain increased speed, at
==15568== the cost of reduced accuracy of conflicting-access information
==15568== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==15500== 
==15500== For counts of detected and suppressed errors, rerun with: -v
==15500== Use --history-level=approx or =none to gain increased speed, at
==15500== the cost of reduced accuracy of conflicting-access information
==15500== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Kodesjekk resultat for oblig1.2.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.2.c
---
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
==15619== 
==15619== For counts of detected and suppressed errors, rerun with: -v
==15619== Use --history-level=approx or =none to gain increased speed, at
==15619== the cost of reduced accuracy of conflicting-access information
==15619== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
oblig1.2.c: In function ‘tfunc’:
oblig1.2.c:39:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
---
Checking Clang-Tidy Errors:
---
35 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.2.c.
/home/shomec/r/runbergh/c-code/oblig1.2.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>               /* printf */
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         <pthread.h> 
/home/shomec/r/runbergh/c-code/oblig1.2.c:35:31: warning: statement should be inside braces [google-readability-braces-around-statements]
              if(targs->signal[i]==1) // Tell opp semafor til tråd i
                                     ^
                                      {
/home/shomec/r/runbergh/c-code/oblig1.2.c:51:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    for(i = 0; i < 6; i++)
                          ^
                           {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==15743== Memcheck, a memory error detector
==15743== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==15743== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==15743== Command: ./oblig1.2.c.out
==15743== 
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==15618== 
==15618== For counts of detected and suppressed errors, rerun with: -v
==15618== Use --history-level=approx or =none to gain increased speed, at
==15618== the cost of reduced accuracy of conflicting-access information
==15618== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==15735== 
==15735== For counts of detected and suppressed errors, rerun with: -v
==15735== Use --history-level=approx or =none to gain increased speed, at
==15735== the cost of reduced accuracy of conflicting-access information
==15735== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
15735
==15736== 
==15736== For counts of detected and suppressed errors, rerun with: -v
==15736== Use --history-level=approx or =none to gain increased speed, at
==15736== the cost of reduced accuracy of conflicting-access information
==15736== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==15743== 
==15743== HEAP SUMMARY:
==15743==     in use at exit: 192 bytes in 6 blocks
==15743==   total heap usage: 13 allocs, 7 frees, 67,360 bytes allocated
==15743== 
==15743== 192 bytes in 6 blocks are definitely lost in loss record 1 of 1
==15743==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==15743==    by 0x400951: main (in /home/others/shomec/r/runbergh/c-code/oblig1.2.c.out)
==15743== 
==15743== LEAK SUMMARY:
==15743==    definitely lost: 192 bytes in 6 blocks
==15743==    indirectly lost: 0 bytes in 0 blocks
==15743==      possibly lost: 0 bytes in 0 blocks
==15743==    still reachable: 0 bytes in 0 blocks
==15743==         suppressed: 0 bytes in 0 blocks
==15743== 
==15743== For counts of detected and suppressed errors, rerun with: -v
==15743== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
---
Checkin Valgrind with helgrind check
---
==15783== Helgrind, a thread error detector
==15783== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==15783== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==15783== Command: ./oblig1.2.c.out
==15783== 
Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==15783== 
==15783== For counts of detected and suppressed errors, rerun with: -v
==15783== Use --history-level=approx or =none to gain increased speed, at
==15783== the cost of reduced accuracy of conflicting-access information
==15783== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 166 from 30)
---
Kodesjekk resultat for oblig1.3
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3
---
oblig1.3: In function `_fini':
(.fini+0x0): multiple definition of `_fini'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o:(.fini+0x0): first defined here
oblig1.3: In function `data_start':
(.data+0x0): multiple definition of `__data_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.data+0x0): first defined here
oblig1.3: In function `data_start':
(.data+0x8): multiple definition of `__dso_handle'
/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o:(.data+0x0): first defined here
oblig1.3:(.rodata+0x0): multiple definition of `_IO_stdin_used'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.rodata.cst4+0x0): first defined here
oblig1.3: In function `_start':
(.text+0x0): multiple definition of `_start'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o:(.text+0x0): first defined here
oblig1.3: In function `_init':
(.init+0x0): multiple definition of `_init'
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o:(.init+0x0): first defined here
/usr/lib/gcc/x86_64-linux-gnu/5/crtend.o:(.tm_clone_table+0x0): multiple definition of `__TMC_END__'
oblig1.3:(.data+0x10): first defined here
/usr/bin/ld: error in oblig1.3(.eh_frame); no .eh_frame_hdr table will be created.
collect2: error: ld returned 1 exit status
---
Checking Clang-Tidy Errors:
---
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.
---
Checking Valgrind leak check
---
valgrind: ./oblig1.3.out: No such file or directory
---
Checkin Valgrind with helgrind check
---
valgrind: ./oblig1.3.out: No such file or directory
---
Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==16785== Memcheck, a memory error detector
==16785== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==16785== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==16785== Command: ./oblig1.c.out
==16785== 
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==16788== 
==16788== HEAP SUMMARY:
==16788==     in use at exit: 0 bytes in 0 blocks
==16788==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==16788== 
==16788== All heap blocks were freed -- no leaks are possible
==16788== 
==16788== For counts of detected and suppressed errors, rerun with: -v
==16788== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==16789== 
==16789== HEAP SUMMARY:
==16789==     in use at exit: 0 bytes in 0 blocks
==16789==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==16789== 
==16789== All heap blocks were freed -- no leaks are possible
==16789== 
==16789== For counts of detected and suppressed errors, rerun with: -v
==16789== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==16785== 
==16785== HEAP SUMMARY:
==16785==     in use at exit: 0 bytes in 0 blocks
==16785==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==16785== 
==16785== All heap blocks were freed -- no leaks are possible
==16785== 
==16785== For counts of detected and suppressed errors, rerun with: -v
==16785== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
Checkin Valgrind with helgrind check
---
==16808== Helgrind, a thread error detector
==16808== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==16808== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==16808== Command: ./oblig1.c.out
==16808== 
==16803== 
==16803== HEAP SUMMARY:
==16803==     in use at exit: 0 bytes in 0 blocks
==16803==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==16803== 
==16803== All heap blocks were freed -- no leaks are possible
==16803== 
==16803== For counts of detected and suppressed errors, rerun with: -v
==16803== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==16802== 
==16802== HEAP SUMMARY:
==16802==     in use at exit: 0 bytes in 0 blocks
==16802==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==16802== 
==16802== All heap blocks were freed -- no leaks are possible
==16802== 
==16802== For counts of detected and suppressed errors, rerun with: -v
==16802== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==16809== 
==16809== For counts of detected and suppressed errors, rerun with: -v
==16809== Use --history-level=approx or =none to gain increased speed, at
==16809== the cost of reduced accuracy of conflicting-access information
==16809== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==16806== 
==16806== HEAP SUMMARY:
==16806==     in use at exit: 0 bytes in 0 blocks
==16806==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==16806== 
==16806== All heap blocks were freed -- no leaks are possible
==16806== 
==16806== For counts of detected and suppressed errors, rerun with: -v
==16806== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
16806
==16807== 
==16807== HEAP SUMMARY:
==16807==     in use at exit: 0 bytes in 0 blocks
==16807==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==16807== 
==16807== All heap blocks were freed -- no leaks are possible
==16807== 
==16807== For counts of detected and suppressed errors, rerun with: -v
==16807== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==16810== 
==16810== For counts of detected and suppressed errors, rerun with: -v
==16810== Use --history-level=approx or =none to gain increased speed, at
==16810== the cost of reduced accuracy of conflicting-access information
==16810== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==16808== 
==16808== For counts of detected and suppressed errors, rerun with: -v
==16808== Use --history-level=approx or =none to gain increased speed, at
==16808== the cost of reduced accuracy of conflicting-access information
==16808== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Kodesjekk resultat for oblig1.2.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.2.c
---
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
==16812== 
==16812== For counts of detected and suppressed errors, rerun with: -v
==16812== Use --history-level=approx or =none to gain increased speed, at
==16812== the cost of reduced accuracy of conflicting-access information
==16812== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
oblig1.2.c: In function ‘tfunc’:
oblig1.2.c:39:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
---
Checking Clang-Tidy Errors:
---
35 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.2.c.
/home/shomec/r/runbergh/c-code/oblig1.2.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>               /* printf */
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         <pthread.h> 
/home/shomec/r/runbergh/c-code/oblig1.2.c:35:31: warning: statement should be inside braces [google-readability-braces-around-statements]
              if(targs->signal[i]==1) // Tell opp semafor til tråd i
                                     ^
                                      {
/home/shomec/r/runbergh/c-code/oblig1.2.c:51:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    for(i = 0; i < 6; i++)
                          ^
                           {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==16827== Memcheck, a memory error detector
==16827== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==16827== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==16827== Command: ./oblig1.2.c.out
==16827== 
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==16811== 
==16811== For counts of detected and suppressed errors, rerun with: -v
==16811== Use --history-level=approx or =none to gain increased speed, at
==16811== the cost of reduced accuracy of conflicting-access information
==16811== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==16819== 
==16819== For counts of detected and suppressed errors, rerun with: -v
==16819== Use --history-level=approx or =none to gain increased speed, at
==16819== the cost of reduced accuracy of conflicting-access information
==16819== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
16819
==16820== 
==16820== For counts of detected and suppressed errors, rerun with: -v
==16820== Use --history-level=approx or =none to gain increased speed, at
==16820== the cost of reduced accuracy of conflicting-access information
==16820== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==16827== 
==16827== HEAP SUMMARY:
==16827==     in use at exit: 192 bytes in 6 blocks
==16827==   total heap usage: 13 allocs, 7 frees, 67,360 bytes allocated
==16827== 
==16827== 192 bytes in 6 blocks are definitely lost in loss record 1 of 1
==16827==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==16827==    by 0x400951: main (in /home/others/shomec/r/runbergh/c-code/oblig1.2.c.out)
==16827== 
==16827== LEAK SUMMARY:
==16827==    definitely lost: 192 bytes in 6 blocks
==16827==    indirectly lost: 0 bytes in 0 blocks
==16827==      possibly lost: 0 bytes in 0 blocks
==16827==    still reachable: 0 bytes in 0 blocks
==16827==         suppressed: 0 bytes in 0 blocks
==16827== 
==16827== For counts of detected and suppressed errors, rerun with: -v
==16827== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
---
Checkin Valgrind with helgrind check
---
==16868== Helgrind, a thread error detector
==16868== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==16868== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==16868== Command: ./oblig1.2.c.out
==16868== 
Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Tråd 0 er ferdig.
Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==16868== 
==16868== For counts of detected and suppressed errors, rerun with: -v
==16868== Use --history-level=approx or =none to gain increased speed, at
==16868== the cost of reduced accuracy of conflicting-access information
==16868== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 166 from 30)
---
Kodesjekk resultat for oblig1.3.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3.c
---
oblig1.3.c: In function ‘validate’:
oblig1.3.c:175:11: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
     if ( !isdigit ( a[x] ) ) return 1;
           ^
---
Checking Clang-Tidy Errors:
---
46 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.c.
/home/shomec/r/runbergh/c-code/oblig1.3.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>
^        ~~~~~~~~~
         <pthread.h>
/home/shomec/r/runbergh/c-code/oblig1.3.c:12:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Producer(void *); /* Producer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:13:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Consumer(void *); /* Consumer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:44:11: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      i = atoi ( buffer );
          ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:47:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/shomec/r/runbergh/c-code/oblig1.3.c:50:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:100:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:138:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:174:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for ( x = 0; x < strlen ( a ); x++ )
                                      ^
                                       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:175:29: warning: statement should be inside braces [readability-braces-around-statements]
    if ( !isdigit ( a[x] ) ) return 1;
                            ^
                             {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 31 warnings (31 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==16949== Memcheck, a memory error detector
==16949== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==16949== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==16949== Command: ./oblig1.3.c.out
==16949== 
==16949== 
==16949== Process terminating with default action of signal 2 (SIGINT)
==16949==    at 0x514E260: __read_nocancel (syscall-template.S:84)
==16949==    by 0x50D15E7: _IO_file_underflow@@GLIBC_2.2.5 (fileops.c:592)
==16949==    by 0x50D260D: _IO_default_uflow (genops.c:413)
==16949==    by 0x50C5C69: _IO_getline_info (iogetline.c:60)
==16949==    by 0x50C4B7C: fgets (iofgets.c:53)
==16949==    by 0x400BBB: main (in /home/others/shomec/r/runbergh/c-code/oblig1.3.c.out)
main started
Enter a number: ==16949== 
==16949== HEAP SUMMARY:
==16949==     in use at exit: 0 bytes in 0 blocks
==16949==   total heap usage: 2 allocs, 2 frees, 66,560 bytes allocated
==16949== 
==16949== All heap blocks were freed -- no leaks are possible
==16949== 
==16949== For counts of detected and suppressed errors, rerun with: -v
==16949== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
valgrind: 2: command not found
---
Checkin Valgrind with helgrind check
---
valgrind: 2: command not found
---
Kodesjekk resultat for oblig1.2.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.2.c
---
oblig1.2.c: In function ‘tfunc’:
oblig1.2.c:39:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
---
Checking Clang-Tidy Errors:
---
35 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.2.c.
/home/shomec/r/runbergh/c-code/oblig1.2.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>               /* printf */
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         <pthread.h> 
/home/shomec/r/runbergh/c-code/oblig1.2.c:35:31: warning: statement should be inside braces [google-readability-braces-around-statements]
              if(targs->signal[i]==1) // Tell opp semafor til tråd i
                                     ^
                                      {
/home/shomec/r/runbergh/c-code/oblig1.2.c:51:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    for(i = 0; i < 6; i++)
                          ^
                           {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
valgrind: 2: command not found
---
Checkin Valgrind with helgrind check
---
valgrind: 2: command not found
---
Kodesjekk resultat for oblig1.3.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3.c
---
oblig1.3.c: In function ‘validate’:
oblig1.3.c:175:11: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
     if ( !isdigit ( a[x] ) ) return 1;
           ^
---
Checking Clang-Tidy Errors:
---
46 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.c.
/home/shomec/r/runbergh/c-code/oblig1.3.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>
^        ~~~~~~~~~
         <pthread.h>
/home/shomec/r/runbergh/c-code/oblig1.3.c:12:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Producer(void *); /* Producer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:13:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Consumer(void *); /* Consumer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:44:11: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      i = atoi ( buffer );
          ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:47:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/shomec/r/runbergh/c-code/oblig1.3.c:50:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:100:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:138:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:174:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for ( x = 0; x < strlen ( a ); x++ )
                                      ^
                                       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:175:29: warning: statement should be inside braces [readability-braces-around-statements]
    if ( !isdigit ( a[x] ) ) return 1;
                            ^
                             {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 31 warnings (31 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
valgrind: 2: command not found
---
Checkin Valgrind with helgrind check
---
valgrind: 2: command not found
---
Kodesjekk resultat for oblig1.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.c
---
---
Checking Clang-Tidy Errors:
---
26 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.c.
/home/shomec/r/runbergh/c-code/oblig1.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h> /* fork */
^        ~~~~~~~~~~~~~~~~~~~~~
         <sys/types.h> /* pid_t */
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==20194== Memcheck, a memory error detector
==20194== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==20194== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==20194== Command: ./oblig1.c.out 2
==20194== 
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==20195== 
==20195== HEAP SUMMARY:
==20195==     in use at exit: 0 bytes in 0 blocks
==20195==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==20195== 
==20195== All heap blocks were freed -- no leaks are possible
==20195== 
==20195== For counts of detected and suppressed errors, rerun with: -v
==20195== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==20196== 
==20196== HEAP SUMMARY:
==20196==     in use at exit: 0 bytes in 0 blocks
==20196==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==20196== 
==20196== All heap blocks were freed -- no leaks are possible
==20196== 
==20196== For counts of detected and suppressed errors, rerun with: -v
==20196== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==20194== 
==20194== HEAP SUMMARY:
==20194==     in use at exit: 0 bytes in 0 blocks
==20194==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==20194== 
==20194== All heap blocks were freed -- no leaks are possible
==20194== 
==20194== For counts of detected and suppressed errors, rerun with: -v
==20194== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
---
Checkin Valgrind with helgrind check
---
==20201== Helgrind, a thread error detector
==20201== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==20201== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==20201== Command: ./oblig1.c.out 2
==20201== 
==20198== 
==20198== HEAP SUMMARY:
==20198==     in use at exit: 0 bytes in 0 blocks
==20198==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==20198== 
==20198== All heap blocks were freed -- no leaks are possible
==20198== 
==20198== For counts of detected and suppressed errors, rerun with: -v
==20198== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==20197== 
==20197== HEAP SUMMARY:
==20197==     in use at exit: 0 bytes in 0 blocks
==20197==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==20197== 
==20197== All heap blocks were freed -- no leaks are possible
==20197== 
==20197== For counts of detected and suppressed errors, rerun with: -v
==20197== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 0 kjører
Prosess 0 kjørte i 1 sekunder
0
==20204== 
==20204== For counts of detected and suppressed errors, rerun with: -v
==20204== Use --history-level=approx or =none to gain increased speed, at
==20204== the cost of reduced accuracy of conflicting-access information
==20204== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==20199== 
==20199== HEAP SUMMARY:
==20199==     in use at exit: 0 bytes in 0 blocks
==20199==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==20199== 
==20199== All heap blocks were freed -- no leaks are possible
==20199== 
==20199== For counts of detected and suppressed errors, rerun with: -v
==20199== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
20199
==20200== 
==20200== HEAP SUMMARY:
==20200==     in use at exit: 0 bytes in 0 blocks
==20200==   total heap usage: 1 allocs, 1 frees, 65,536 bytes allocated
==20200== 
==20200== All heap blocks were freed -- no leaks are possible
==20200== 
==20200== For counts of detected and suppressed errors, rerun with: -v
==20200== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 2 kjører
Prosess 2 kjørte i 3 sekunder
0
==20205== 
==20205== For counts of detected and suppressed errors, rerun with: -v
==20205== Use --history-level=approx or =none to gain increased speed, at
==20205== the cost of reduced accuracy of conflicting-access information
==20205== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==20201== 
==20201== For counts of detected and suppressed errors, rerun with: -v
==20201== Use --history-level=approx or =none to gain increased speed, at
==20201== the cost of reduced accuracy of conflicting-access information
==20201== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
---
Kodesjekk resultat for oblig1.2.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.2.c
---
Prosess 1 kjører
Prosess 1 kjørte i 2 sekunder
0
==20207== 
==20207== For counts of detected and suppressed errors, rerun with: -v
==20207== Use --history-level=approx or =none to gain increased speed, at
==20207== the cost of reduced accuracy of conflicting-access information
==20207== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
oblig1.2.c: In function ‘tfunc’:
oblig1.2.c:39:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
---
Checking Clang-Tidy Errors:
---
35 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.2.c.
/home/shomec/r/runbergh/c-code/oblig1.2.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>               /* printf */
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         <pthread.h> 
/home/shomec/r/runbergh/c-code/oblig1.2.c:35:31: warning: statement should be inside braces [google-readability-braces-around-statements]
              if(targs->signal[i]==1) // Tell opp semafor til tråd i
                                     ^
                                      {
/home/shomec/r/runbergh/c-code/oblig1.2.c:51:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    for(i = 0; i < 6; i++)
                          ^
                           {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==20216== Memcheck, a memory error detector
==20216== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==20216== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==20216== Command: ./oblig1.2.c.out 2
==20216== 
Prosess 4 kjører
Prosess 4 kjørte i 3 sekunder
0
==20206== 
==20206== For counts of detected and suppressed errors, rerun with: -v
==20206== Use --history-level=approx or =none to gain increased speed, at
==20206== the cost of reduced accuracy of conflicting-access information
==20206== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 3 kjører
Prosess 3 kjørte i 2 sekunder
0
==20208== 
==20208== For counts of detected and suppressed errors, rerun with: -v
==20208== Use --history-level=approx or =none to gain increased speed, at
==20208== the cost of reduced accuracy of conflicting-access information
==20208== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Prosess 5 kjører
Prosess 5 kjørte i 3 sekunder
20208
==20209== 
==20209== For counts of detected and suppressed errors, rerun with: -v
==20209== Use --history-level=approx or =none to gain increased speed, at
==20209== the cost of reduced accuracy of conflicting-access information
==20209== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==20216== 
==20216== HEAP SUMMARY:
==20216==     in use at exit: 192 bytes in 6 blocks
==20216==   total heap usage: 13 allocs, 7 frees, 67,360 bytes allocated
==20216== 
==20216== 192 bytes in 6 blocks are definitely lost in loss record 1 of 1
==20216==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==20216==    by 0x400951: main (in /home/others/shomec/r/runbergh/c-code/oblig1.2.c.out)
==20216== 
==20216== LEAK SUMMARY:
==20216==    definitely lost: 192 bytes in 6 blocks
==20216==    indirectly lost: 0 bytes in 0 blocks
==20216==      possibly lost: 0 bytes in 0 blocks
==20216==    still reachable: 0 bytes in 0 blocks
==20216==         suppressed: 0 bytes in 0 blocks
==20216== 
==20216== For counts of detected and suppressed errors, rerun with: -v
==20216== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
---
Checkin Valgrind with helgrind check
---
==20223== Helgrind, a thread error detector
==20223== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.
==20223== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==20223== Command: ./oblig1.2.c.out 2
==20223== 
Hei. Tråd 0 har startet
 Den skal kjøre i 1 sekund
 Hei. Tråd 2 har startet
 Den skal kjøre i 2 sekund
 Tråd 0 er ferdig.
Hei. Tråd 1 har startet
 Den skal kjøre i 2 sekund
 Hei. Tråd 4 har startet
 Den skal kjøre i 3 sekund
 Tråd 2 er ferdig.
Tråd 1 er ferdig.
Hei. Tråd 3 har startet
 Den skal kjøre i 2 sekund
 Tråd 4 er ferdig.
Hei. Tråd 5 har startet
 Den skal kjøre i 3 sekund
 Tråd 3 er ferdig.
Tråd 5 er ferdig.
==20223== 
==20223== For counts of detected and suppressed errors, rerun with: -v
==20223== Use --history-level=approx or =none to gain increased speed, at
==20223== the cost of reduced accuracy of conflicting-access information
==20223== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 166 from 30)
---
Kodesjekk resultat for oblig1.3.c
&&&&&&&&&&&&&
Checking with gcc -Wall -pthread -o filename.out oblig1.3.c
---
oblig1.3.c: In function ‘validate’:
oblig1.3.c:175:11: warning: implicit declaration of function ‘isdigit’ [-Wimplicit-function-declaration]
     if ( !isdigit ( a[x] ) ) return 1;
           ^
---
Checking Clang-Tidy Errors:
---
46 warnings and 1 error generated.
Error while processing /home/shomec/r/runbergh/c-code/oblig1.3.c.
/home/shomec/r/runbergh/c-code/oblig1.3.c:1:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>
^        ~~~~~~~~~
         <pthread.h>
/home/shomec/r/runbergh/c-code/oblig1.3.c:12:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Producer(void *); /* Producer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:13:22: warning: all parameters should be named in a function [readability-named-parameter]
void *Consumer(void *); /* Consumer thread */
                     ^
                      /*arg*/
/home/shomec/r/runbergh/c-code/oblig1.3.c:44:11: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
      i = atoi ( buffer );
          ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:47:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/shomec/r/runbergh/c-code/oblig1.3.c:50:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:100:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:138:10: warning: rand() has limited randomness [cert-msc30-c]
                usleep(rand()%MAX_MOD);
                       ^
/home/shomec/r/runbergh/c-code/oblig1.3.c:174:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for ( x = 0; x < strlen ( a ); x++ )
                                      ^
                                       {
/home/shomec/r/runbergh/c-code/oblig1.3.c:175:29: warning: statement should be inside braces [readability-braces-around-statements]
    if ( !isdigit ( a[x] ) ) return 1;
                            ^
                             {
/usr/include/stdio.h:33:11: error: 'stddef.h' file not found [clang-diagnostic-error]
# include <stddef.h>
          ^
Suppressed 31 warnings (31 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
---
Checking Valgrind leak check
---
==20236== Memcheck, a memory error detector
==20236== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==20236== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==20236== Command: ./oblig1.3.c.out 2
==20236== 
==20236== 
==20236== Process terminating with default action of signal 2 (SIGINT)
==20236==    at 0x514E260: __read_nocancel (syscall-template.S:84)
==20236==    by 0x50D15E7: _IO_file_underflow@@GLIBC_2.2.5 (fileops.c:592)
==20236==    by 0x50D260D: _IO_default_uflow (genops.c:413)
==20236==    by 0x50C5C69: _IO_getline_info (iogetline.c:60)
==20236==    by 0x50C4B7C: fgets (iofgets.c:53)
==20236==    by 0x400BBB: main (in /home/others/shomec/r/runbergh/c-code/oblig1.3.c.out)
main started
Enter a number: ==20236== 
==20236== HEAP SUMMARY:
==20236==     in use at exit: 0 bytes in 0 blocks
==20236==   total heap usage: 2 allocs, 2 frees, 66,560 bytes allocated
==20236== 
==20236== All heap blocks were freed -- no leaks are possible
==20236== 
==20236== For counts of detected and suppressed errors, rerun with: -v
==20236== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
